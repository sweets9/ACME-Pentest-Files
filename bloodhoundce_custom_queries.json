[
    {
        "name": "Find all Certificate Templates",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n",
        "description": ""
    },
    {
        "name": "Find enabled Certificate Templates",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n",
        "description": ""
    },
    {
        "name": "Show Enrollment Rights for Certificate Template",
        "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
        "description": ""
    },
    {
        "name": "Show Rights for Certificate Authority",
        "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
        "description": ""
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC1)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p",
        "description": ""
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC2)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN p",
        "description": ""
    },
    {
        "name": "Find Enrollment Agent Templates (ESC3)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage` or n.`Any Purpose` = True) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or n.`Any Purpose` = True or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
        "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n",
        "description": ""
    },
    {
        "name": "Find Unsecured Certificate Templates (ESC9)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n",
        "description": ""
    },
    {
        "name": "Find Unsecured Certificate Templates (ESC9)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true  RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Unsecured Certificate Templates from Owned Principals (ESC9)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE n.type = 'Certificate Template' and g<>n and 'NoSecurityExtension' in n.`Enrollment Flag` and n.`Enabled` = true and NONE(rel in r WHERE type(rel) in ['EnabledBy','Read','ManageCa','ManageCertificates']) return p",
        "description": ""
    },
    {
        "name": "Domains",
        "query": "MATCH (d:Domain) RETURN d",
        "description": ""
    },
    {
        "name": "Domain Controllers",
        "query": "MATCH p=(c:Computer)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p",
        "description": ""
    },
    {
        "name": "High Value Targets",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(h {highvalue: true}) RETURN p",
        "description": ""
    },
    {
        "name": "Computers without LAPS",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(c:Computer {haslaps: false}) RETURN p",
        "description": ""
    },
    {
        "name": "Owned Principals",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(o {owned: true}) RETURN p",
        "description": ""
    },
    {
        "name": "Sensitive Principals by Keywords",
        "query": "UNWIND ['admin', 'amministratore', 'empfindlich', 'geheim', 'important', 'azure', 'MSOL', 'kennwort', 'pass', 'secret', 'sensib', 'sensitiv'] AS word MATCH (n) WHERE (toLower(n.name) CONTAINS toLower(word)) OR (toLower(n.description) CONTAINS toLower(word)) RETURN n",
        "description": ""
    },
    {
        "name": "Users with Password in AD",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User) WHERE u.userpassword IS NOT NULL RETURN p",
        "description": ""
    },
    {
        "name": "Users with \"Pass\" in AD Description",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User) WHERE u.description =~ '(?i).*pass.*' RETURN p",
        "description": ""
    },
    {
        "name": "Users with Password not Required",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User {passwordnotreqd: true}) RETURN p",
        "description": ""
    },
    {
        "name": "Users with Password never Expiring",
        "query": "MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(u:User {pwdneverexpires: True}) WHERE NOT u.name starts with 'KRBTGT' RETURN u",
        "description": ""
    },
    {
        "name": "Users with with Same Name in Different Domains",
        "query": "MATCH (u1:User),(u2:User) WHERE split(u1.name,'@')[0] = split(u2.name,'@')[0] AND u1.domain <> u2.domain AND tointeger(split(u1.objectid,'-')[7]) >= 1000 RETURN u1",
        "description": ""
    },
    {
        "name": "Protected Users",
        "query": "MATCH p=(u:User)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p",
        "description": ""
    },
    {
        "name": "AdminTo Relationships",
        "query": "MATCH p=(u {domain: $result})-[r:AdminTo]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Administrators",
        "query": "MATCH p=(u:User)-[:MemberOf*1..]->(n:Group {name: $result}) RETURN p",
        "description": ""
    },
    {
        "name": "Computers in Administrators",
        "query": "MATCH p = (c:Computer)-[r:MemberOf|HasSIDHistory*1..]->(g:Group {name: $result}) RETURN p",
        "description": ""
    },
    {
        "name": "Computers Local Admin to Another Computer",
        "query": "MATCH p = (c1:Computer {domain: $result})-[r1:AdminTo]->(c2:Computer) RETURN p UNION ALL MATCH p = (c3:Computer {domain: $result})-[r2:MemberOf|HasSIDHistory*1..]->(g:Group)-[r3:AdminTo]->(c4:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Sessions of Administrators on non DCs Computers",
        "query": "MATCH (dc:Computer {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE g1.objectid =~ \"S-1-5-.*-516\" WITH COLLECT(dc) AS exclude MATCH p = (c:Computer {domain: $result})-[n:HasSession]->(u:User)-[r2:MemberOf*1..]->(g2:Group) WHERE NOT c IN exclude and g2.objectid ENDS WITH \"-544\" RETURN p",
        "description": ""
    },
    {
        "name": "DCSync Principals not Administrators",
        "query": "MATCH (admins {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE (g1.objectid =~ \"(?i)S-1-5-.*-512\") OR (g1.objectid =~ \"(?i)S-1-5-.*-516\") OR (g1.objectid =~ \"(?i)S-1-5-.*-518\") OR (g1.objectid =~ \"(?i)S-1-5-.*-519\") OR (g1.objectid =~ \"(?i)S-1-5-.*-520\") OR (g1.objectid =~ \"(?i)S-1-5-.*-544\") OR (g1.objectid =~ \"(?i)S-1-5-.*-548\") OR (g1.objectid =~ \"(?i)S-1-5-.*-549\") OR (g1.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(admins) AS exclude MATCH p=(n1)-[:MemberOf|GetChanges*0..]->(u:Domain {name: $result}) WHERE NOT n1 IN exclude and (n1:Computer or n1:User) RETURN p",
        "description": ""
    },
    {
        "name": "AS-REP Roastable Principals",
        "query": "MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {dontreqpreauth: true}) RETURN u",
        "description": ""
    },
    {
        "name": "Kerberoastable Principals",
        "query": "MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {hasspn: true}) RETURN u",
        "description": ""
    },
    {
        "name": "Kerberoastable Administrators",
        "query": "MATCH (admins {domain: $result})-[r1:MemberOf*0..]->(g1:Group) WHERE (g1.objectid =~ \"(?i)S-1-5-.*-512\") OR (g1.objectid =~ \"(?i)S-1-5-.*-516\") OR (g1.objectid =~ \"(?i)S-1-5-.*-518\") OR (g1.objectid =~ \"(?i)S-1-5-.*-519\") OR (g1.objectid =~ \"(?i)S-1-5-.*-520\") OR (g1.objectid =~ \"(?i)S-1-5-.*-544\") OR (g1.objectid =~ \"(?i)S-1-5-.*-548\") OR (g1.objectid =~ \"(?i)S-1-5-.*-549\") OR (g1.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(admins) AS filter MATCH (d:Domain {name: $result})-[r:Contains*1..]->(u {hasspn: true}) WHERE u IN filter RETURN u",
        "description": ""
    },
    {
        "name": "Constrained Delegations",
        "query": "MATCH p = (a {domain: $result})-[:AllowedToDelegate]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Constrained Delegations with Protocol Transition (trustedToAuth)",
        "query": "MATCH p = (a {domain: $result, trustedtoauth: true})-[:AllowedToDelegate]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Computers Allowed to Delegate for Another Computer",
        "query": "MATCH p = (c1:Computer {domain: $result})-[:AllowedToDelegate]->(c2:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Unconstrained Delegation Principals",
        "query": "MATCH (dca)-[r:MemberOf*0..]->(g:Group) WHERE g.objectid =~ \"S-1-5-.*-516\" OR g.objectid =~ \".*-S-1-5-32-544\" WITH COLLECT(dca) AS exclude MATCH p = (d:Domain {name: $result})-[r:Contains*1..]->(uc {unconstraineddelegation: true}) WHERE (uc:User OR uc:Computer) AND NOT uc IN exclude RETURN p",
        "description": ""
    },
    {
        "name": "Resource-Based Constrained Delegation Principals",
        "query": "MATCH p=(m)-[r:AllowedToAct]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Configure Resource-Based Constrained Delegation Permissions",
        "query": "MATCH p=(m)-[r:AddAllowedToAct]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Interesting GPOs by Keyword",
        "query": "UNWIND [\"360totalsecurity\", \"access\", \"acronis\", \"adaware\", \"admin\", \"admin\", \"aegislab\", \"ahnlab\", \"alienvault\", \"altavista\", \"amsi\", \"anti-virus\", \"antivirus\", \"antiy\", \"apexone\", \"applock\", \"arcabit\", \"arcsight\", \"atm\", \"atp\", \"av\", \"avast\", \"avg\", \"avira\", \"baidu\", \"baiduspider\", \"bank\", \"barracuda\", \"bingbot\", \"bitdefender\", \"bluvector\", \"canary\", \"carbon\", \"carbonblack\", \"certificate\", \"check\", \"checkpoint\", \"citrix\", \"clamav\", \"code42\", \"comodo\", \"countercept\", \"countertack\", \"credential\", \"crowdstrike\", \"custom\", \"cyberark\", \"cybereason\", \"cylance\", \"cynet360\", \"cyren\", \"darktrace\", \"datadog\", \"defender\", \"druva\", \"drweb\", \"duckduckbot\", \"edr\", \"egambit\", \"emsisoft\", \"encase\", \"endgame\", \"ensilo\", \"escan\", \"eset\", \"exabot\", \"exception\", \"f-secure\", \"f5\", \"falcon\", \"fidelis\", \"fireeye\", \"firewall\", \"fix\", \"forcepoint\", \"forti\", \"fortigate\", \"fortil\", \"fortinet\", \"gdata\", \"gravityzone\", \"guard\", \"honey\", \"huntress\", \"identity\", \"ikarussecurity\", \"insight\", \"ivanti\", \"juniper\", \"k7antivirus\", \"k7computing\", \"kaspersky\", \"kingsoft\", \"kiosk\", \"laps\", \"lightcyber\", \"logging\", \"logrhythm\", \"lynx\", \"malwarebytes\", \"manageengine\", \"mass\", \"mcafee\", \"microsoft\", \"mj12bot\", \"msnbot\", \"nanoav\", \"nessus\", \"netwitness\", \"office365\", \"onedrive\", \"orion\", \"palo\", \"paloalto\", \"paloaltonetworks\", \"panda\", \"pass\", \"powershell\", \"proofpoint\", \"proxy\", \"qradar\", \"rdp\", \"rsa\", \"runasppl\", \"sandboxe\", \"sap\", \"scanner\", \"scanning\", \"sccm\", \"script\", \"secret\", \"secureage\", \"secureworks\", \"security\", \"sensitive\", \"sentinel\", \"sentinelone\", \"slurp\", \"smartcard\", \"sogou\", \"solarwinds\", \"sonicwall\", \"sophos\", \"splunk\", \"superantispyware\", \"symantec\", \"tachyon\", \"temporary\", \"tencent\", \"totaldefense\", \"transfer\", \"trapmine\", \"trend micro\", \"trendmicro\", \"trusteer\", \"trustlook\", \"uac\", \"vdi\", \"virusblokada\", \"virustotal\", \"virustotalcloud\", \"vpn\", \"vuln\", \"webroot\", \"whitelist\", \"wifi\", \"winrm\", \"workaround\", \"yubikey\", \"zillya\", \"zonealarm\", \"zscaler\"] as word match (n:GPO {domain: $result}) where toLower(n.name) CONTAINS toLower(word) RETURN n",
        "description": ""
    },
    {
        "name": "GPO Permissions of Non-Admin Principals",
        "query": "MATCH (u1:user {domain: $result})-[r:MemberOf*1..]->(n:Group) WHERE (n.objectid =~ \"(?i)S-1-5-.*-512\") OR (n.objectid =~ \"(?i)S-1-5-.*-516\") OR (n.objectid =~ \"(?i)S-1-5-.*-518\") OR (n.objectid =~ \"(?i)S-1-5-.*-519\") OR (n.objectid =~ \"(?i)S-1-5-.*-520\") OR (n.objectid =~ \"(?i)S-1-5-.*-544\") OR (n.objectid =~ \"(?i)S-1-5-.*-548\") OR (n.objectid =~ \"(?i)S-1-5-.*-549\") OR (n.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(u1) AS exclude MATCH p = (u2:User)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) WHERE NOT u2 IN exclude RETURN p",
        "description": ""
    },
    {
        "name": "LAPS Passwords Readable by Non-Admin",
        "query": "MATCH (u1:user {domain: $result})-[r:MemberOf*1..]->(n:Group) WHERE (n.objectid =~ \"(?i)S-1-5-.*-512\") OR (n.objectid =~ \"(?i)S-1-5-.*-516\") OR (n.objectid =~ \"(?i)S-1-5-.*-518\") OR (n.objectid =~ \"(?i)S-1-5-.*-519\") OR (n.objectid =~ \"(?i)S-1-5-.*-520\") OR (n.objectid =~ \"(?i)S-1-5-.*-544\") OR (n.objectid =~ \"(?i)S-1-5-.*-548\") OR (n.objectid =~ \"(?i)S-1-5-.*-549\") OR (n.objectid =~ \"(?i)S-1-5-.*-551\") WITH COLLECT(u1) AS exclude MATCH p = (u2)-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) WHERE NOT u2 IN exclude RETURN p",
        "description": ""
    },
    {
        "name": "LAPS Passwords Readable by Owned Principals",
        "query": "MATCH p = (n {owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2:GenericAll]->(t:Computer {haslaps:true}) RETURN p",
        "description": ""
    },
    {
        "name": "ACLs to Computers (excluding High Value Targets)",
        "query": "MATCH p = (ucg {highvalue: false})-[r {isacl: true}]->(c:Computer {domain: $result}) WHERE (ucg:User OR ucg:Computer OR ucg:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Group Delegated Outbound Object Control of Owned Principals",
        "query": "MATCH p = (n {owned: true})-[r1:MemberOf*1..]->(g:Group)-[r2 {isacl: true}]->(t) RETURN p",
        "description": ""
    },
    {
        "name": "Dangerous Rights for Groups under Domain Users",
        "query": "MATCH p=(m:Group {domain: $result})-[r1:MemberOf*1..]->(g:Group)-[:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n) WHERE m.objectid ENDS WITH '-513' RETURN p",
        "description": ""
    },
    {
        "name": "Set DCSync Principals as High Value Targets",
        "query": "MATCH (s)-[r:MemberOf|GetChanges*1..]->(d:Domain) WITH s, d MATCH (s)-[r:MemberOf|GetChangesAll*1..]->(d) WITH s, d MATCH p = (s)-[r:MemberOf|GetChanges|GetChangesAll*1..]->(d) WHERE s.highvalue = false SET s.highvalue = true, s.highvaluereason = 'DCSync Principal' RETURN p",
        "description": ""
    },
    {
        "name": "Set Unconstrained Delegation Principals as High Value Targets",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(uc) WHERE (uc:User OR uc:Computer) AND uc.unconstraineddelegation = true AND uc.highvalue = false SET uc.highvalue = true, uc.highvaluereason = 'Unconstrained Delegation Principal' RETURN p",
        "description": ""
    },
    {
        "name": "Set Local Admin or Reset Password Principals as High Value Targets",
        "query": "MATCH (a)-[r:AdminTo|ForceChangePassword]->(b) WHERE a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Local Admin or Reset Password Principal' RETURN a",
        "description": ""
    },
    {
        "name": "Set Principals with Privileges on Computers as High Value Targets",
        "query": "MATCH (a)-[r:AllowedToDelegate|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner]->(n:Computer) WHERE a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Principal with Privileges on Computers' RETURN a",
        "description": ""
    },
    {
        "name": "Set Principals with Privileges on Cert Publishers as High Value Targets",
        "query": "MATCH (a)-[r:GenericAll|GenericWrite|MemberOf|Owns|WriteDacl|WriteOwner]->(g:Group) WHERE g.objectid =~ 'S-1-5-21-.*-517' AND a.highvalue = false SET a.highvalue = true, a.highvaluereason = 'Principal with Privileges on the Cert Publisher group' RETURN a",
        "description": ""
    },
    {
        "name": "Set Members of High Value Targets Groups as High Value Targets",
        "query": "MATCH (a)-[r:MemberOf*1..]->(g:Group) WHERE a.highvalue = false AND g.highvalue = true SET a.highvalue = true, a.highvaluereason = 'Member of High Value Target Group' RETURN a",
        "description": ""
    },
    {
        "name": "Remove Inactive Users and Computers from High Value Targets",
        "query": "MATCH (uc) WHERE uc.highvalue = true AND ((uc:User AND uc.enabled = false) OR (uc:Computer AND ((uc.enabled = false) OR (uc.lastlogon > 0 AND uc.lastlogon < (TIMESTAMP() / 1000 - 15552000)) OR (uc.lastlogontimestamp > 0 AND uc.lastlogontimestamp < (TIMESTAMP() / 1000 - 15552000))))) SET uc.highvalue = false, uc.nothighvaluereason = 'Inactive' RETURN uc",
        "description": ""
    },
    {
        "name": "Shortest Paths to Domain (including Computers)",
        "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(d:Domain {name: $result})) WHERE (uc:User OR uc:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to no LAPS",
        "query": "MATCH p = allShortestPaths((uc)-[r:{}*1..]->(c:Computer)) WHERE (uc:User OR uc:Computer) AND NOT uc = c AND c.haslaps = false RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Kerberoastable Users to Computers",
        "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(c:Computer)) WHERE u.hasspn = true RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Kerberoastable Users to High Value Targets",
        "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(h)) WHERE u.hasspn = true AND h.highvalue = true RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Owned Principals (including everything)",
        "query": "MATCH p = allShortestPaths((u:User)-[r:{}*1..]->(a)) WHERE u.owned = true AND u <> a RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Owned Principals to Domain",
        "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(d:Domain)) WHERE o.owned = true AND d.name = $result RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Owned Principals to High Value Targets",
        "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(h)) WHERE o.owned = true AND h.highvalue = true RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Owned Principals to no LAPS",
        "query": "MATCH p = allShortestPaths((o)-[r:{}*1..]->(c:Computer)) WHERE NOT o = c AND o.owned = true AND c.haslaps = false RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from no Signing to Domain",
        "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(d:Domain)) WHERE c.hassigning = false AND d.name = $result RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from no Signing to High Value Targets",
        "query": "MATCH p = allShortestPaths((c:Computer)-[r:{}*1..]->(h)) WHERE NOT c = h AND c.hassigning = false AND h.highvalue = true RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths from Domain Users and Domain Computers (including everything)",
        "query": "MATCH p = allShortestPaths((g:Group)-[r:{}*1..]->(a)) WHERE (g.objectid =~ $domain_users_id OR g.objectid =~ $domain_computers_id) AND g <> a RETURN p",
        "description": ""
    },
    {
        "name": "List all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List all owned computers",
        "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List all owned groups",
        "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List all High Valued Targets",
        "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List the groups of all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Find the Shortest path to a high value target from an owned object",
        "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p",
        "description": ""
    },
    {
        "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
        "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p",
        "description": ""
    },
    {
        "name": "Find all Kerberoastable Users",
        "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
        "description": ""
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset ",
        "description": ""
    },
    {
        "name": "Find Kerberoastable Users with a path to DA",
        "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p",
        "description": ""
    },
    {
        "name": "Find machines Domain Users can RDP into",
        "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p",
        "description": ""
    },
    {
        "name": "Find what groups can RDP",
        "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users that have local admin rights",
        "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all active Domain Admin sessions",
        "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p",
        "description": ""
    },
    {
        "name": "Find all computers with Unconstrained Delegation",
        "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c",
        "description": ""
    },
    {
        "name": "Find all computers with unsupported operating systems",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find users that logged in within the last 90 days",
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find users with passwords last set within the last 90 days",
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find constrained delegation",
        "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find computers that allow unconstrained delegation that AREN\u00e2\u20ac\u2122T domain controllers.",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
        "description": ""
    },
    {
        "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
        "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c",
        "description": ""
    },
    {
        "name": "View all GPOs",
        "query": "Match (n:GPO) RETURN n",
        "description": ""
    },
    {
        "name": "View all groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
        "description": ""
    },
    {
        "name": "Find users that can be AS-REP roasted",
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
        "description": ""
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
        "query": "MATCH (u:User) WHERE n.hasspn=true AND WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Show all high value target's groups",
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that contain both users and computers",
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users who are members of high value groups",
        "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users and where they are AdminTo",
        "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u",
        "description": ""
    },
    {
        "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
        "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
        "description": ""
    },
    {
        "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
        "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups",
        "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users a part of the VPN group",
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
        "description": ""
    },
    {
        "name": "Find users that have never logged on and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
        "description": ""
    },
    {
        "name": "Find an object in one domain that can do something to a foreign object",
        "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p",
        "description": ""
    },
    {
        "name": "Find all sessions a user in a specific domain has",
        "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:{result}}) RETURN p",
        "description": ""
    },
    {
        "name": "Find an object from domain 'A' that can do anything to a foreign object",
        "query": "MATCH p=(n {domain:{result}})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
        "description": ""
    },
    {
        "name": "Find All edges any owned user has on a computer",
        "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p",
        "description": ""
    },
    {
        "name": "----------------------------------------AZURE QUERIES----------------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
        "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p",
        "description": ""
    },
    {
        "name": "Return All On-Prem users with edges to Azure",
        "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p",
        "description": ""
    },
    {
        "name": "Find all paths to an Azure VM",
        "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p",
        "description": ""
    },
    {
        "name": "Find all paths to an Azure KeyVault",
        "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users and their Groups",
        "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
        "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
        "description": ""
    },
    {
        "name": "Find all Privileged Service Principals",
        "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Find all Owners of Azure Applications",
        "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to High Value Targets from Owned Principles",
        "query": "MATCH (n),(m),p=shortestPath((n)-[r:{}*1..]->(m)) WHERE m.domain={result} AND m.highvalue=true AND NOT m = n AND n.owned=true RETURN p",
        "description": ""
    },
    {
        "name": "List Computers where DOMAIN USERS are Local Admin",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) WHERE m.name STARTS WITH 'DOMAIN USERS' RETURN p",
        "description": ""
    },
    {
        "name": "Find Workstations where DOMAIN USERS can RDP To",
        "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.name STARTS WITH 'DOMAIN USERS' AND NOT c.operatingsystem CONTAINS 'Server' return p",
        "description": ""
    },
    {
        "name": "Find Servers where DOMAIN USERS can RDP To",
        "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.name STARTS WITH 'DOMAIN USERS' AND c.operatingsystem CONTAINS 'Server' return p",
        "description": ""
    },
    {
        "name": "ALL Path from DOMAIN USERS to High Value Targets",
        "query": "MATCH (g:Group) WHERE g.name STARTS WITH 'DOMAIN USERS'  MATCH (n {highvalue:true}),p=shortestPath((g)-[r*1..]->(n)) return p",
        "description": ""
    },
    {
        "name": "Find all other Rights DOMAIN USERS shouldn\u00e2\u20ac\u2122t have",
        "query": "MATCH p=(m:Group)-[r:Owns|:WriteDacl|:GenericAll|:WriteOwner|:ExecuteDCOM|:GenericWrite|:AllowedToDelegate|:ForceChangePassword]->(n:Computer) WHERE m.name STARTS WITH 'DOMAIN USERS' RETURN p",
        "description": ""
    },
    {
        "name": "DA Account Sessions",
        "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.name STARTS WITH 'DOMAIN ADMINS' MATCH p = (c:Computer)-[:HasSession]->(n) return p",
        "description": ""
    },
    {
        "name": "DA Account Sessions to NON DC",
        "query": "MATCH (c:Computer)-[:MemberOf]->(t:Group) WHERE NOT t.name STARTS WITH 'DOMAIN CONTROLLERS' WITH c as NonDC MATCH p=(NonDC)-[:HasSession]->(n:User)-[:MemberOf]-> (g:Group WHERE g.name STARTS WITH 'DOMAIN ADMINS') RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable Accounts member of High Value Group",
        "query": "MATCH (n:User)-[r:MemberOf]->(g:Group) WHERE g.highvalue=true AND n.hasspn=true RETURN n, g, r",
        "description": ""
    },
    {
        "name": "List all Kerberoastable Accounts",
        "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
        "description": ""
    },
    {
        "name": "Top Ten Users with Most Sessions",
        "query": "MATCH (n:User),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Admins",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Sessions",
        "query": "MATCH (n:User),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN n,r,m",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Admin Sessions",
        "query": "MATCH (n:User),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN n,r,m",
        "description": ""
    },
    {
        "name": "Top Ten Users with Most Local Admin Rights",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
        "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p",
        "description": ""
    },
    {
        "name": "Return All On-Prem users with edges to Azure",
        "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p",
        "description": ""
    },
    {
        "name": "Find all paths to an Azure VM",
        "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p",
        "description": ""
    },
    {
        "name": "Find all paths to an Azure KeyVault",
        "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users and their Groups (Warning: Heavy)",
        "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p",
        "description": ""
    },
    {
        "name": "Return GUEST Azure Users and their Groups",
        "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' AND m.userprincipalname=~ '(?i).*#EXT#.*' RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users and their Admin Roles",
        "query": "MATCH p=(n)-[:AZHasRole|AZMemberOf*1..]->(:AZRole) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users and their owned Devices (Warning: Heavy)",
        "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Admins and their owned Devices",
        "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser)<-[r2:AZHasRole]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
        "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
        "description": ""
    },
    {
        "name": "Find all Privileged Service Principals",
        "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Find all Owners of Azure Applications",
        "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p",
        "description": ""
    },
    {
        "name": "Find the Shortest path to a high value target from an owned object",
        "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p",
        "description": ""
    },
    {
        "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
        "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p",
        "description": ""
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC2)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) return p",
        "description": ""
    },
    {
        "name": "Find Enrollment Agent Templates (ESC3)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p",
        "description": ""
    },
    {
        "name": "Find users with blank passwords that are enabled",
        "query": "MATCH (u:User) WHERE NOT u.userpassword IS null AND u.enabled = TRUE RETURN u.name,u.userpassword",
        "description": ""
    },
    {
        "name": "Find users with Temp in user title and created in the last 30 days",
        "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) AND u.title CONTAINS 'Temp' RETURN u",
        "description": ""
    },
    {
        "name": "Find users created in the last 30 days",
        "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) RETURN u",
        "description": ""
    },
    {
        "name": "Find users' credentials in description fields",
        "query": "MATCH (m:User) WHERE m.description CONTAINS 'password' RETURN m.name, m.description",
        "description": ""
    },
    {
        "name": "Find Server 2000 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2000).*' AND H.enabled = TRUE RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2000 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2000).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2003 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2003).*' AND H.enabled = TRUE RETURN H",
        "description": ""
    },
    {
        "name": "All computers without LAPS and the computer is enabled",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p",
        "description": ""
    },
    {
        "name": "Find Server 2003 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2003).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2008 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2008).*' AND H.enabled = TRUE RETURN H",
        "description": ""
    },
    {
        "name": "List all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "Kerberoastable Admins",
        "query": "MATCH (n:Group) WHERE n.objectsid =~ $sid WITH n MATCH p=(n)<-[MemberOf*1..]-(m {hasspn: true}) RETURN p",
        "description": ""
    },
    {
        "name": "All Kerberoastable Users",
        "query": "MATCH (n {hasspn: true}) RETURN n",
        "description": ""
    },
    {
        "name": "Where can owned users RDP",
        "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Users with most local admin rights",
        "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5",
        "description": ""
    },
    {
        "name": "All Owned Nodes",
        "query": "MATCH (n {owned: true}) RETURN n",
        "description": ""
    },
    {
        "name": "Find computers with owned Admins",
        "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) return p",
        "description": ""
    },
    {
        "name": "Find owned Groups",
        "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g",
        "description": ""
    },
    {
        "name": "Find owned Domain Admins",
        "query": "MATCH (n:Group) WHERE n.name =~ $name AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p",
        "description": ""
    },
    {
        "name": "Find Shortest Path from owned Node to Domain Admin",
        "query": "MATCH (n:User),(m:Group {name:$result}),p=shortestPath((n {owned:true})-[r:MemberOf|AdminTo|HasSession|Contains|GpLink|Owns|DCSync|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(m)) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Next steps (5 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p",
        "description": ""
    },
    {
        "name": "Unconstrained Delegation systems",
        "query": "MATCH (c {unconstraineddelegation:true}) return c",
        "description": ""
    },
    {
        "name": "Constrained Delegation systems",
        "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p",
        "description": ""
    },
    {
        "name": "Unconstrained Delegation systems (without domain controllers)",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2",
        "description": ""
    },
    {
        "name": "Shortest paths from owned principals to unconstrained delegation systems",
        "query": "MATCH (n {owned:true}) MATCH p=shortestPath((n)-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
        "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ \"(?i)S-1-5-.*-525\" WITH COLLECT (u.name) as protectedUsers MATCH p=(u2:User)-[:MemberOf*1..3]->(g2:Group) WHERE u2.admincount=true AND u2.sensitive=false AND NOT u2.name IN protectedUsers RETURN p",
        "description": ""
    },
    {
        "name": "Groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
        "description": ""
    },
    {
        "name": "Find users that can RDP into something",
        "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
        "description": ""
    },
    {
        "name": "Find users that belong to high value groups",
        "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
        "description": ""
    },
    {
        "name": "Find kerberoastable users",
        "query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1",
        "description": ""
    },
    {
        "name": "Return users with seasons in their password and are high value targets",
        "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
        "description": ""
    },
    {
        "name": "Return users with seasons in their password and have local admin on at least one computer",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
        "description": ""
    },
    {
        "name": "Return users with a variant of \"password\" in their password and are high value targets",
        "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
        "description": ""
    },
    {
        "name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
        "description": ""
    },
    {
        "name": "Groups of High Value Targets",
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
        "description": ""
    },
    {
        "name": "Non Admin Groups with High Value Privileges",
        "query": "MATCH p=(g:Group)-[r:Owns|:WriteDacl|:GenericAll|:WriteOwner|:ExecuteDCOM|:GenericWrite|:AllowedToDelegate|:ForceChangePassword]->(n:Computer) WHERE NOT g.name CONTAINS 'ADMIN' RETURN p",
        "description": ""
    },
    {
        "name": "Groups with Computer and User Objects",
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
        "description": ""
    },
    {
        "name": "Groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p",
        "description": ""
    },
    {
        "name": "Groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Users never logged on and account still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
        "description": ""
    },
    {
        "name": "Users logged in the last 90 days",
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Users with passwords last set in the last 90 days",
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups",
        "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users a part of the VPN group",
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
        "description": ""
    },
    {
        "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
        "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
        "description": ""
    },
    {
        "name": "Next steps (3 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: true})-[*1..3]->(s)) WHERE NOT c = s RETURN p",
        "description": ""
    },
    {
        "name": "Owned users with permissions against GPOs",
        "query": "MATCH p=(u:User {owned:true})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Find all other Rights Domain Users shouldn't have",
        "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
        "description": ""
    },
    {
        "name": "Computers with administrative Domain Users",
        "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
        "description": ""
    },
    {
        "name": "List all owned computers",
        "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List all owned groups",
        "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List all High Valued Targets",
        "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m",
        "description": ""
    },
    {
        "name": "List the groups of all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Find all Kerberoastable Users",
        "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
        "description": ""
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset ",
        "description": ""
    },
    {
        "name": "Find Kerberoastable Users with a path to DA",
        "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p",
        "description": ""
    },
    {
        "name": "Find machines Domain Users can RDP into",
        "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p",
        "description": ""
    },
    {
        "name": "Find what groups can RDP",
        "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users that have local admin rights (Warning Can Be Heavy)",
        "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users that have local admin rights or Groups (Warning Can Be Heavy)",
        "query": "MATCH p=(m:User)-[r:AdminTo|MemberOf*1..]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all active Domain Admin sessions",
        "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p",
        "description": ""
    },
    {
        "name": "Find all computers with Unconstrained Delegation",
        "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c",
        "description": ""
    },
    {
        "name": "Find all computers with unsupported operating systems",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' AND H.enabled = TRUE RETURN H",
        "description": ""
    },
    {
        "name": "Find users that logged in within the last 90 days",
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find users with passwords last set within the last 90 days",
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find constrained delegation",
        "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find computers that allow unconstrained delegation that AREN\u00e2\u20ac\u2122T domain controllers.",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
        "description": ""
    },
    {
        "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
        "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c",
        "description": ""
    },
    {
        "name": "View all GPOs",
        "query": "Match (n:GPO) RETURN n",
        "description": ""
    },
    {
        "name": "View all groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
        "description": ""
    },
    {
        "name": "Find users that can be AS-REP roasted",
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
        "description": ""
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Show all high value target's groups",
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that contain both users and computers",
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users who are members of high value groups",
        "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users and where they are AdminTo",
        "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u1",
        "description": ""
    },
    {
        "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
        "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
        "description": ""
    },
    {
        "name": "Find Users/Groups with direct access to GPOs",
        "query": "MATCH p = (n)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
        "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups",
        "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users a part of the VPN group",
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
        "description": ""
    },
    {
        "name": "Find users that have never logged on and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
        "description": ""
    },
    {
        "name": "Find an object in one domain that can do something to a foreign object",
        "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p",
        "description": ""
    },
    {
        "name": "Find all sessions a user in a specific domain has",
        "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:$result}) RETURN p",
        "description": ""
    },
    {
        "name": "Find an object from domain 'A' that can do anything to a foreign object",
        "query": "MATCH p=(n {domain:$result})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
        "description": ""
    },
    {
        "name": "Find All edges any owned user has on a computer",
        "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p",
        "description": ""
    },
    {
        "name": "Find Un-Supported OS and Enabled",
        "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|7|me).*' AND n.enabled = true RETURN n",
        "description": ""
    },
    {
        "name": "Find Server 2008 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2008).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Windows XP and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(xp).*' AND H.enabled = true RETURN H",
        "description": ""
    },
    {
        "name": "Find Windows XP with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(xp).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Windows 7 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(7).*' AND H.enabled = true RETURN H",
        "description": ""
    },
    {
        "name": "Find Windows 7 session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(7).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2012 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2012).*' AND H.enabled = true RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2012 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2012).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2016 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2016).*' AND H.enabled = true RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2016 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2016).*' RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2019 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2019).*' AND H.enabled = true RETURN H",
        "description": ""
    },
    {
        "name": "Find Server 2019 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2019).*' RETURN H",
        "description": ""
    },
    {
        "name": "All Users with a homedirectory",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.homedirectory =~ '(?i).*.*' RETURN p",
        "description": ""
    },
    {
        "name": "All Computers without LAPS - with session",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer)-[:HasSession]->(y) WHERE c.haslaps = false RETURN p",
        "description": ""
    },
    {
        "name": "All enabled computers with a description",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*.*' RETURN p",
        "description": ""
    },
    {
        "name": "All enabled computers with a description containing the word file",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*file.*' RETURN p",
        "description": ""
    },
    {
        "name": "Locate enabled accounts with display name of admin - put anyname in you like",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.displayname =~ '(?i).*admin*' AND u.enabled = true RETURN p",
        "description": ""
    },
    {
        "name": "Find all users with passwords set over 720 days ago (23 months)",
        "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (720 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find all users with passwords set over 1440 days ago (47 months)",
        "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (1440 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer",
        "query": "MATCH (m:User)-[r:MemberOf*1..]->(n:Group) WHERE n.objectid =~ '(?i)S-1-5-.*-512' WITH m MATCH q=((m)<-[:HasSession]-(o:Computer)) RETURN q",
        "description": ""
    },
    {
        "name": "Find users that have never logged on and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
        "description": ""
    },
    {
        "name": "Find users that haven't logged on in 720 days and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp < (datetime().epochseconds - (720 * 86400)) AND n.enabled=TRUE RETURN n ",
        "description": ""
    },
    {
        "name": "Search for key words in users title such as scientist or Executive - tweak as required",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.title =~ '(?i).*scientist*' AND u.enabled = true RETURN p",
        "description": ""
    },
    {
        "name": "List Computers where DOMAIN USERS are Local Admin",
        "query": "MATCH p=(m:Group {name:{result}})-[:AdminTo]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Path from DOMAIN USERS to High Value Targets",
        "query": "MATCH p=shortestPath((g:Group {name:{result}})-[*1..]->(n {highvalue:true})) WHERE g.name STARTS WITH 'DOMAIN USERS' return p",
        "description": ""
    },
    {
        "name": "All Paths from DOMAIN USERS to High Value Targets",
        "query": "MATCH p=shortestPath((g:Group {name:{result}})-[*1..]->(n {highvalue:true})) return p",
        "description": ""
    },
    {
        "name": "Find Workstations where DOMAIN USERS can RDP To",
        "query": "match p=(g:Group {name:{result}})-[:CanRDP]->(c:Computer) where NOT c.operatingsystem CONTAINS 'Server' return p",
        "description": ""
    },
    {
        "name": "Find Servers where DOMAIN USERS can RDP To",
        "query": "MATCH p=(g:Group {name:{result}})-[:CanRDP]->(c:Computer) WHERE c.operatingsystem CONTAINS 'Server' return p",
        "description": ""
    },
    {
        "name": "Find all other Rights DOMAIN USERS shouldn\u00e2\u20ac\u2122t have",
        "query": "MATCH p=(m:Group)-[r:Owns|:WriteDacl|:GenericAll|:WriteOwner|:ExecuteDCOM|:GenericWrite|:AllowedToDelegate|:ForceChangePassword]->(n:Computer) WHERE m.name STARTS WITH 'DOMAIN USERS' RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable Accounts member of High Value Group",
        "query": "MATCH p=shortestPath((n:User)-[r:MemberOf]->(g:Group)) WHERE g.highvalue=true AND n.hasspn=true RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable Users with most privileges",
        "query": "MATCH (u:User {hasspn:true}) OPTIONAL MATCH (u)-[:AdminTo]->(c1:Computer) OPTIONAL MATCH (u)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c2:Computer) WITH u,COLLECT(c1) + COLLECT(c2) AS tempVar UNWIND tempVar AS comps RETURN u.name,COUNT(DISTINCT(comps)) ORDER BY COUNT(DISTINCT(comps)) DESC",
        "description": ""
    },
    {
        "name": "DA Account Sessions to NON DC",
        "query": "MATCH (c:Computer)-[:MemberOf]->(t:Group) WHERE NOT t.name STARTS WITH 'DOMAIN CONTROLLERS' WITH c as NonDC MATCH p=(NonDC)-[:HasSession]->(n:User)-[:MemberOf]-> (g:Group) WHERE g.name STARTS WITH 'DOMAIN ADMINS' RETURN p",
        "description": ""
    },
    {
        "name": "Find unsupported OSs",
        "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).(2000|2003|2008|xp|vista|7|me).' RETURN n",
        "description": ""
    },
    {
        "name": "Find AS-REP Roasting users (no kerberos pre-authentication)",
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
        "description": ""
    },
    {
        "name": "[WIP] Users with Most Local Admin Rights",
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Computers with Most Sessions [Required: sessions]",
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Users with Most Sessions [Required: sessions]",
        "query": "MATCH (n:User {domain: $result}),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "List non-privileged user(s) with dangerous permissions to any node type",
        "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) RETURN u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous permissions to any node type",
        "query": "MATCH (u:User {enabled: true, admincount: false, domain: $result})-[r]->(a) WITH u, COUNT(DISTINCT type(r)) AS permissions ORDER BY permissions DESC LIMIT 10 MATCH p=allshortestpaths((u)-[r]->(a)) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Users with most cross-domain sessions [Required: sessions]",
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true, domain: $result})<-[r:HasSession]-(c:Computer) WHERE NOT u.domain = c.domain WITH u, count(r) as rel_count order by rel_count desc LIMIT 10 MATCH p=(c:Computer)-[r:HasSession]->(u) WHERE NOT u.domain = c.domain RETURN p ORDER BY c.name",
        "description": ""
    },
    {
        "name": "List high value target(s)",
        "query": "MATCH (a {highvalue: true, domain: $result}) RETURN a",
        "description": ""
    },
    {
        "name": "List domain(s)",
        "query": "MATCH (d:Domain) RETURN d",
        "description": ""
    },
    {
        "name": "List domain trust(s)",
        "query": "MATCH p=(n:Domain)-->(m:Domain) RETURN p",
        "description": ""
    },
    {
        "name": "List enabled user(s)",
        "query": "MATCH (u:User {enabled:true, domain: $result}) RETURN u",
        "description": ""
    },
    {
        "name": "List enabled user(s) with an email address",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE exists(u.email) RETURN u",
        "description": ""
    },
    {
        "name": "List non-managed service account(s)",
        "query": "MATCH (u:User {hasspn:true, domain: $result}) WHERE NOT u.name CONTAINS '$' AND NOT u.name CONTAINS 'KRBTGT' RETURN u",
        "description": ""
    },
    {
        "name": "List enabled principal(s) with \"Unconstrained Delegation\"",
        "query": "MATCH (a {unconstraineddelegation: true, enabled: true, domain: $result}) RETURN a",
        "description": ""
    },
    {
        "name": "List enabled principal(s) with \"Constrained Delegation\"",
        "query": "MATCH (a {enabled: true, domain: $result}) WHERE exists(a.`allowedtodelegate`) RETURN a",
        "description": ""
    },
    {
        "name": "List domain controller(s)",
        "query": "MATCH (c:Computer {domain: $result})-[:MemberOf]->(g:Group) WHERE g.samaccountname CONTAINS 'Domain Controllers' RETURN c",
        "description": ""
    },
    {
        "name": "List domain computer(s)",
        "query": "MATCH (c:Computer {domain: $result}) RETURN c",
        "description": ""
    },
    {
        "name": "List Certificate Authority server(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {type:'Enrollment Service', domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "[WIP] List privileges for Certificate Authority server(s) [Required: Certipy]",
        "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
        "description": ""
    },
    {
        "name": "List all Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {type:'Certificate Template', domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "Find enabled Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {enabled:true, type:'Certificate Template', domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "[WIP] List all Enrollment Right(s) for Certificate Template(s)",
        "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result, type:'Certificate Template'}) return p",
        "description": ""
    },
    {
        "name": "List computer(s) WITHOUT LAPS",
        "query": "MATCH (c:Computer {haslaps:false, domain: $result}) RETURN c ORDER BY c.name",
        "description": ""
    },
    {
        "name": "List network share(s), ignoring SYSVOL",
        "query": "MATCH (a {domain: $result}) WHERE (any(prop in keys(a) where a[prop] contains '\\\\' and not a[prop] contains 'SYSVOL')) RETURN a",
        "description": ""
    },
    {
        "name": "List all group(s)",
        "query": "Match (g:Group {domain: $result}) RETURN g",
        "description": ""
    },
    {
        "name": "List all GPO(s)",
        "query": "Match (g:GPO {domain: $result}) RETURN g",
        "description": ""
    },
    {
        "name": "List all principal(s) with \"Local Admin\" permission",
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all principal(s) with \"RDP\" permission",
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all principal(s) with \"SQLAdmin\" permission",
        "query": "MATCH p=(a {domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all user session(s) [Required: sessions]",
        "query": "MATCH p=(u:User {domain: $result})<-[r:HasSession]-(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all user(s) with description field",
        "query": "MATCH (u:User {domain: $result}) WHERE u.description IS NOT null return u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) with \"userpassword\" attribute",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.userpassword IS NOT null RETURN u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) with \"password never expires\" attribute",
        "query": "MATCH (u:User {pwdneverexpires:true, enabled:true, domain: $result}) return u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) with \"password never expires\" attribute and not changed in last year",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdneverexpires=TRUE AND u.pwdlastset < (datetime().epochseconds - (365 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] return u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) with \"don't require passwords\" attribute",
        "query": "MATCH (u:User {passwordnotreqd:true, enabled:true, domain: $result}) return u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) but never logged in",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogontimestamp=-1.0 RETURN u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) that logged in within the last 90 days",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) that set password within the last 90 days",
        "query": "MATCH (u:User {enabled:true, domain: $result}) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "List all enabled user(s) with foreign group membership",
        "query": "MATCH p=(u:User {enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group) WHERE NOT u.domain = g.domain RETURN p",
        "description": ""
    },
    {
        "name": "List all owned user(s)",
        "query": "MATCH (u:User {owned:true, domain: $result}) RETURN u",
        "description": ""
    },
    {
        "name": "List all owned & enabled user(s)",
        "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) RETURN u",
        "description": ""
    },
    {
        "name": "List all owned & enabled user(s) with an email address",
        "query": "MATCH (u:User {owned:true, enabled:true, domain: $result}) WHERE exists(u.email) RETURN u",
        "description": ""
    },
    {
        "name": "List all owned & enabled user(s) with \"Local Admin\" permission, and any active sessions and their group membership(s)",
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "description": ""
    },
    {
        "name": "List all owned & enabled user(s) with \"RDP\" permission, and any active sessions and their group membership(s)",
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "description": ""
    },
    {
        "name": "List all owned & enabled user(s) with \"SQLAdmin\" permission",
        "query": "MATCH p=(u:User {owned:true, enabled: true, domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all owned computer(s)",
        "query": "MATCH (c:Computer {owned:true, domain: $result}) RETURN c ORDER BY c.name",
        "description": ""
    },
    {
        "name": "Route all owned & enabled group membership(s)",
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Route all owned & enabled non-privileged group(s) membership",
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:false}) RETURN p",
        "description": ""
    },
    {
        "name": "Route all owned & enabled privileged group(s) membership",
        "query": "MATCH p=(u:User {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount:true}) RETURN p",
        "description": ""
    },
    {
        "name": "Route all owned & enabled user(s) with Dangerous Rights to any node type",
        "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a)) WHERE NOT a = u RETURN p",
        "description": ""
    },
    {
        "name": "Route all owned & enabled user(s) with Dangerous Rights to group(s)",
        "query": "MATCH p=allshortestpaths((u:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(:Group))RETURN p",
        "description": ""
    },
    {
        "name": "Route all owned & enabled user(s) with Dangerous Rights to user(s)",
        "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(u:User)) WHERE NOT o = u RETURN p",
        "description": ""
    },
    {
        "name": "Route from owned & enabled user(s) to all principals with \"Unconstrained Delegation\"",
        "query": "MATCH p=allshortestpaths((o:User {owned:true, enabled:true, domain: $result})-[*]->(a {unconstraineddelegation: true, enabled: true})) WHERE NOT o = a RETURN p",
        "description": ""
    },
    {
        "name": "Route from owned & enabled principals to high value target(s)",
        "query": "MATCH p=allShortestPaths((o {owned:true, enabled:true, domain: $result})-[*]->(a {highvalue: true})) WHERE NOT o=a RETURN p",
        "description": ""
    },
    {
        "name": "Owned: [WIP] Find all owned user with privileged access to Azure Tenancy (Required: azurehound)",
        "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p",
        "description": ""
    },
    {
        "name": "Owned: [WIP] Find all owned user where group membership grants privileged access to Azure Tenancy (Required: azurehound)",
        "query": "MATCH p=(n {owned:true, enabled:true, domain: $result})-[:MemberOf*1..]->(g:Group)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(:AZTenant) RETURN p",
        "description": ""
    },
    {
        "name": "Owned: [WIP] Find all Owners of Azure Applications with Owners to Service Principals with Dangerous Rights (Required: azurehound)",
        "query": "MATCH p = (n {enabled:true, owned:true, domain: $result})-[:AZOwns]->(azapp:AZApp)-[r1]->(azsp:AZServicePrincipal)-[r:AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
        "description": ""
    },
    {
        "name": "Find all owned groups that grant access to network shares",
        "query": "MATCH p=(u:User {owned:true, domain: $result})-[:MemberOf*1..]->(g:Group) where (any(prop in keys(g) where g[prop] contains '\\\\')) return p",
        "description": ""
    },
    {
        "name": "Route all sessions to computers WITHOUT LAPS (Required: sessions)",
        "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer {haslaps:false}) RETURN p ORDER BY c.name",
        "description": ""
    },
    {
        "name": "Route all sessions to computers (Required: sessions)",
        "query": "MATCH p=(u:User {owned:true, domain: $result})<-[r:HasSession]-(c:Computer) RETURN p ORDER BY c.name",
        "description": ""
    },
    {
        "name": "List enabled non-privileged user(s) with \"Local Admin\" permission",
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List enabled non-privileged user(s) with \"Local Admin\" permission, and any active sessions and their group membership(s)",
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|AdminTo*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "description": ""
    },
    {
        "name": "List enabled non-privileged user(s) with \"RDP\" permission",
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List enabled non-privileged user(s) with \"RDP\" permission, and any active sessions and their group membership(s)",
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|CanRDP*1..]->(c:Computer) OPTIONAL MATCH p2=(c)-[:HasSession]->(u2:User) OPTIONAL MATCH p3=(u2:User)-[:MemberOf*1..]->(:Group) RETURN p, p2, p3",
        "description": ""
    },
    {
        "name": "List enabled non-privileged user(s) with \"SQLAdmin\" permission",
        "query": "MATCH p=(u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|SQLAdmin*1..]->(c:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "List all \"Domain Users\" group membership(s)",
        "query": "MATCH p=(g1:Group {domain: $result})-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'DOMAIN USERS' RETURN p ORDER BY g2.name",
        "description": ""
    },
    {
        "name": "List all \"Authenticated Users\" group membership(s)",
        "query": "MATCH p=(g1:Group {domain: $result})-[:MemberOf*1..]->(g2:Group) WHERE g1.name STARTS WITH 'AUTHENTICATED USERS' RETURN p ORDER BY g2.name",
        "description": ""
    },
    {
        "name": "Find all enabled AS-REP roastable user(s)",
        "query": "MATCH (u:User {dontreqpreauth: true, enabled:true, domain: $result}) WHERE NOT u.name CONTAINS '$' and NOT u.name CONTAINS 'KRBTGT' RETURN u",
        "description": ""
    },
    {
        "name": "Find all enabled kerberoastable user(s)",
        "query": "MATCH (u:User {hasspn: true, enabled:true, domain: $result}) WHERE NOT u.name CONTAINS '$' and NOT u.name CONTAINS 'KRBTGT' RETURN u",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous rights to user(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:User)) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous rights to group(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Group)) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous rights to computer(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Computer)) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous rights to GPO(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:GPO)) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged user(s) with dangerous rights to privileged node(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((u:User {enabled: true, admincount: false, domain: $result})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a {admincount: true})) WHERE NOT u = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged computer(s) with dangerous rights to user(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:User {domain: $result})) WHERE NOT c = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged computer(s) with dangerous rights to group(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Group {domain: $result})) WHERE NOT c = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged computer(s) with dangerous rights to computer(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:Computer {domain: $result})) WHERE NOT c = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged computer(s) with dangerous rights to GPO(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a:GPO {domain: $result})) WHERE NOT c = a RETURN p",
        "description": ""
    },
    {
        "name": "Route non-privileged computer(s) with dangerous rights to privileged node(s) [HIGH RAM]",
        "query": "MATCH p=allshortestpaths((c:Computer {admincount: false})-[:MemberOf|Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|AllowedToDelegate|ForceChangePassword|AdminTo*1..]->(a {admincount: true, domain: $result})) WHERE NOT c = a RETURN p",
        "description": ""
    },
    {
        "name": "List ESC1 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', `Enrollee Supplies Subject`:true, `Client Authentication`:true, domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "List ESC2 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', domain: $result}) WHERE (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) RETURN n",
        "description": ""
    },
    {
        "name": "List ESC3 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {Enabled:true, type:'Certificate Template', domain: $result}) WHERE (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN n",
        "description": ""
    },
    {
        "name": "List ESC4 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO {Enabled:true, type:'Certificate Template', domain: $result})) WHERE g<>n RETURN p",
        "description": ""
    },
    {
        "name": "List ESC6 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {type:'Enrollment Service', `User Specified SAN`:'Enabled', domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "List ESC7 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO {type:'Enrollment Service', domain: $result})) WHERE  g<>n RETURN p",
        "description": ""
    },
    {
        "name": "List ESC8 vulnerable Certificate Template(s) [Required: Certipy]",
        "query": "MATCH (n:GPO {type:'Enrollment Service', `Web Enrollment`:'Enabled', domain: $result}) RETURN n",
        "description": ""
    },
    {
        "name": "List all cross-domain user session(s) and user group membership(s)",
        "query": "MATCH p=(g1:Group)<-[:MemberOf*1..]-(u:User {enabled:true, domain: $result})<-[:HasSession]-(c:Computer) WHERE NOT u.domain = c.domain RETURN p ORDER BY c.name",
        "description": ""
    },
    {
        "name": "List privileged user(s) without \"Protected Users\" group membership",
        "query": "MATCH (u:User {admincount:true, domain: $result}), (c:Computer), (u)-[:MemberOf*1..]->(g) WHERE g.name CONTAINS 'Protected Users' WITH COLLECT(u) AS privilegedUsers MATCH (u2:User {admincount:true}) WHERE NOT u2 IN privilegedUsers RETURN u2",
        "description": ""
    },
    {
        "name": "List custom privileged group(s)",
        "query": "MATCH (g:Group {admincount:true, highvalue:false, domain: $result}) WHERE NOT (g.objectid =~ $domain_admins or g.objectid =~ $enterprise_admins or g.objectid =~ $administrators or g.objectid =~ $account_operators or g.objectid CONTAINS $replicators or g.objectid =~ $key_admins or g.objectid =~ $read_only_domain_controllers or g.objectid =~ $enterprise_key_admins or g.objectid =~ $schema_admins) RETURN g",
        "description": ""
    },
    {
        "name": "List all enabled SVC account(s) with privileged group membership(s)",
        "query": "MATCH p=(u:User {enabled: true, hasspn: true, domain: $result})-[:MemberOf*1..]->(g:Group {admincount: true}) RETURN p",
        "description": ""
    },
    {
        "name": "Route all privileged user(s) with sessions to non-privileged computer(s) [Required: sessions]",
        "query": "MATCH (c:Computer), (u:User), (g:Group), (c)-[:MemberOf*1..]->(:Group {admincount:false}) MATCH p=(c)-[:HasSession]->(u {admincount:true, domain: $result}) RETURN p",
        "description": ""
    },
    {
        "name": "Find allshortestpaths with dangerous rights to AdminSDHolder object",
        "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[*]->(c:Container)) WHERE c.distinguishedname CONTAINS 'ADMINSDHOLDER' RETURN p",
        "description": ""
    },
    {
        "name": "Find allshortestpaths with DCSync to domain object",
        "query": "MATCH p=allshortestpaths((u:User {enabled:true, admincount:false, domain: $result})-[r:MemberOf|DCSync*1..]->(:Domain)) RETURN p",
        "description": ""
    },
    {
        "name": "Find allshortestpaths with Shadow Credential permission to principal(s)",
        "query": "MATCH p=allshortestpaths((a {domain: $result})-[:MemberOf|AddKeyCredentialLink*1..]->(b)) WHERE NOT a=b RETURN p",
        "description": ""
    },
    {
        "name": "List all Tenancy (Required: azurehound)",
        "query": "MATCH (t:AZTenant) RETURN t",
        "description": ""
    },
    {
        "name": "[WIP] List all AAD Group(s) that are synchronized with AD (Required: azurehound)",
        "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
        "description": ""
    },
    {
        "name": "[WIP] List all principal(s) used for syncing AD and AAD",
        "query": "MATCH (u) WHERE (u:User OR u:AZUser) AND (u.name =~ '(?i)^MSOL_|.*AADConnect.*' OR u.userprincipalname =~ '(?i)^sync_.*') OPTIONAL MATCH (u)-[:HasSession]->(s:Session) RETURN u, s",
        "description": ""
    },
    {
        "name": "List all enabled Azure User(s) (Required: azurehound)",
        "query": "MATCH (u:AZUser {enabled:true}) RETURN u",
        "description": ""
    },
    {
        "name": "List all enabled Azure User(s) Azure Group membership(s) (Required: azurehound)",
        "query": "MATCH p=(azu:AZUser {enabled:true})-[:MemberOf*1..]->(azg:AZGroup) RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] List all AD principal(s) with edge(s) to Azure principal(s) (Required: azurehound)",
        "query": "MATCH p=(u:User)-[r:MemberOf|AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor*1..]->(n) WHERE u.objectid CONTAINS 'S-1-5-21' RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] List all principal(s) with privileged access to Azure Tenancy (Required: azurehound)",
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[r:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Route all principal(s) that have control permissions to Azure Application(s) running as Azure Service Principals (AzSP), and route from privileged ASP to Azure Tenancy (Required: azurehound)",
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=(a)-[:MemberOf|AZOwns|AZAppAdmin*1..]->(azapp:AZApp) OPTIONAL MATCH p2=(azapp)-[:AZRunsAs]->(azsp:AZServicePrincipal) OPTION MATCH p3=(azsp)-[:MemberOf|AZGlobalAdmin|AZPrivilegedRoleAdmin*1..]->(azt:AZTenant) RETURN p, p2, p3",
        "description": ""
    },
    {
        "name": "[WIP] Route all user principal(s) that have control permissions to Azure Service Principals (AzSP), and route from AzSP to principal(s) (Required: azurehound)",
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((a)-[*]->(azsp:AZServicePrincipal)-[*]->(b)) WHERE NOT a=b RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Route from Azure User principal(s) that have dangerous rights to Azure User and User principal(s) (Required: azurehound)",
        "query": "MATCH (a) WHERE (a:User OR a:AZUser) WITH a MATCH p=allShortestPaths((u:AZUser)-[*]->(a)) WHERE NOT a=u RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Route from principal(s) to Azure VM (Required: azurehound)",
        "query": "MATCH p=allshortestpaths((a)-[*]->(vm:AZVM)) WHERE NOT a=vm RETURN p",
        "description": ""
    },
    {
        "name": "[WIP] Route from principal(s) to principal(s) with Global Administrator permissions (Required: azurehound)",
        "query": "MATCH p=(ga)-[:AZGlobalAdmin|AZPrivilegedAdminRole*1..]->(:AZTenant) WHERE (ga:User OR ga:AZUser) WITH ga MATCH p=allshortestpaths((a)-[*]->(ga)) WHERE NOT a=ga RETURN p",
        "description": ""
    },
    {
        "name": "Find ALL Shortest Paths to Domain Admins",
        "query": "MATCH p=allShortestPaths((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Find ALL Shortest Paths to Domain Admins - Network",
        "query": "MATCH p=allShortestPaths((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH p,nodes(p) as nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Find ALL Shortest Paths to Domain Admins - Filtered",
        "query": "MATCH p=allShortestPaths((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH nodes(p) as nds,p MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Find Shortest Paths to Domain Admins - Network",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH nodes(p) as nds,p MATCH q=((src:Computer)-[:Open]->(trgt:Computer)) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,q,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,q,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p,q",
        "description": ""
    },
    {
        "name": "Find Shortest Paths to Domain Admins - Filtered",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH nodes(p) as nds,p MATCH q=((src:Computer)-[:Open]->(trgt:Computer)) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,q,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,q,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to High Value Targets - Network",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m {highvalue:true})) WHERE m<>n WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to High Value Targets - Filtered",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m {highvalue:true})) WHERE m<>n WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Unconstrained Delegation Systems - Network",
        "query": "MATCH (n) MATCH p=shortestPath((n)-[:{}*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to Unconstrained Delegation Systems - Filtered",
        "query": "MATCH (n) MATCH p=shortestPath((n)-[:{}*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Domain Admins from Kerberoastable Users - Network",
        "query": "MATCH p=shortestPath((n:User {hasspn:true})-[:{}*1..]->(m:Group {name:$result})) WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to Domain Admins from Kerberoastable Users - Filtered",
        "query": "MATCH p=shortestPath((n:User {hasspn:true})-[:{}*1..]->(m:Group {name:$result})) WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Path from Owned Principals - Network",
        "query": "MATCH p=shortestPath((a {name:$result})-[:{}*1..]->(b:Computer)) WHERE NOT a=b WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Path from Owned Principals - Filtered",
        "query": "MATCH p=shortestPath((a {name:$result})-[:{}*1..]->(b:Computer)) WHERE NOT a=b WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Domain Admins from Owned Principals - Network",
        "query": "MATCH p=shortestPath((n {owned:true})-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to Domain Admins from Owned Principals - Filtered",
        "query": "MATCH p=shortestPath((n {owned:true})-[:{}*1..]->(m:Group {name:$result})) WHERE NOT n=m WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to High Value Targets - Network",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m {highvalue:true})) WHERE m<>n WITH p, nodes(p) AS nds MATCH q = ((src:Computer)-[:Open]->(trgt:Computer)) WHERE src IN nds AND trgt IN nds WITH p,q,nds,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix RETURN p,q",
        "description": ""
    },
    {
        "name": "Shortest Paths to High Value Targets - Filtered",
        "query": "MATCH p=shortestPath((n)-[:{}*1..]->(m {highvalue:true})) WHERE m<>n WITH p, nodes(p) AS nds MATCH (src:Computer)-[:Open]->(trgt:Computer) MATCH (c:Computer) WHERE src IN nds AND trgt IN nds AND c IN nds WITH p,nds,c,src,trgt,reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN src THEN i ELSE ix END ) AS srcix, reduce(ix = -1, i IN RANGE(0,SIZE(nds)-1) | CASE nds[i] WHEN trgt THEN i ELSE ix END ) AS trgtix WHERE trgtix > srcix WITH p,size(collect(DISTINCT c)) AS total_hosts, size(collect(DISTINCT trgt)) AS total_targets WHERE total_hosts = total_targets + 1 RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable Admins",
        "query": "MATCH (n:Group) WHERE n.objectsid =~ $sid WITH n MATCH p=(n)<-[MemberOf*1..]-(m {hasspn: true}) RETURN p",
        "description": ""
    },
    {
        "name": "All Kerberoastable Users",
        "query": "MATCH (n {hasspn: true}) RETURN n",
        "description": ""
    },
    {
        "name": "Where can owned users RDP",
        "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Users with most local admin rights",
        "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5",
        "description": ""
    },
    {
        "name": "All Owned Nodes",
        "query": "MATCH (n {owned: true}) RETURN n",
        "description": ""
    },
    {
        "name": "Find computers with owned Admins",
        "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) return p",
        "description": ""
    },
    {
        "name": "Find owned Groups",
        "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g",
        "description": ""
    },
    {
        "name": "Find owned Domain Admins",
        "query": "MATCH (n:Group) WHERE n.name =~ $name AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p",
        "description": ""
    },
    {
        "name": "Find Shortest Path from owned Node to Domain Admin",
        "query": "MATCH (n:User),(m:Group {name:$result}),p=shortestPath((n {owned:true})-[r:MemberOf|AdminTo|HasSession|Contains|GpLink|Owns|DCSync|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(m)) RETURN p",
        "description": ""
    },
    {
        "name": "Find all other Rights Domain Users shouldn't have",
        "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
        "description": ""
    },
    {
        "name": "Computers with administrative Domain Users",
        "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
        "description": ""
    },
    {
        "name": "-------------------------- Engagement-specific Queries --------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "List all high-valued nodes",
        "query": "MATCH (n {highvalue:true}) RETURN n",
        "description": ""
    },
    {
        "name": "List all owned nodes",
        "query": "MATCH (n {owned:true}) RETURN n",
        "description": ""
    },
    {
        "name": "List all owned computers",
        "query": "MATCH (c:Computer {owned:true}) RETURN c",
        "description": ""
    },
    {
        "name": "List all owned groups",
        "query": "MATCH (g:Group {owned:true}) RETURN g",
        "description": ""
    },
    {
        "name": "List all owned users",
        "query": "MATCH (u:User {owned:true}) RETURN u",
        "description": ""
    },
    {
        "name": "List the groups of all owned users",
        "query": "MATCH p=(:User {owned:true})-[:MemberOf*]->(:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Set the groups of all owned users as owned",
        "query": "MATCH p=(:User {owned:true})-[:MemberOf*]->(g:Group) SET g.owned = true RETURN p",
        "description": ""
    },
    {
        "name": "--------------------------- High-value-specific Queries ---------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Remove inactive nodes from the list of high-value nodes",
        "query": "MATCH (n {highvalue:true, enabled:false}) SET n.highvalue = false, n.nothighvaluereason = 'Inactive' RETURN n",
        "description": ""
    },
    {
        "name": "Set DCSync principals as high-value nodes",
        "query": "MATCH p=(n {highvalue:false})-[:MemberOf|GetChanges|GetChangesAll*]->(:Domain) SET n.highvalue = true, n.highvaluereason = 'DCSync Principal' RETURN p",
        "description": ""
    },
    {
        "name": "Set Local Admin or Reset Password principals as high-value nodes",
        "query": "MATCH (n {highvalue:false})-[:AdminTo|ForceChangePassword*]->(m) SET n.highvalue = true, n.highvaluereason = 'Local Admin or Reset Password Principal' RETURN n",
        "description": ""
    },
    {
        "name": "Set Unconstrained Delegation principals as high-value nodes",
        "query": "MATCH (n {highvalue:false, unconstraineddelegation:true}) SET n.highvalue = true, n.highvaluereason = 'Unconstrained Delegation Principal' RETURN n",
        "description": ""
    },
    {
        "name": "Set principals with privileges on Computers as high-value nodes",
        "query": "MATCH (n {highvalue:false})-[*]->(:Computer) SET n.highvalue = true, n.highvaluereason = 'Principal with Privileges on Computers' RETURN n",
        "description": ""
    },
    {
        "name": "Set members of high-value groups as high-value nodes",
        "query": "MATCH (n {highvalue:false})-[:MemberOf*]->(g:Group {highvalue:true}) SET n.highvalue = true, n.highvaluereason = 'Member of a High-Value Group' RETURN g",
        "description": ""
    },
    {
        "name": "Set the groups of high-value nodes as high-value nodes",
        "query": "MATCH (n {highvalue:true})-[:MemberOf*]->(g:Group {highvalue:false}) SET g.highvalue = true, g.highvaluereason = 'Contains High-Value Members' RETURN g",
        "description": ""
    },
    {
        "name": "---------------------------- Kerberos-related Queries ----------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users who have administrative rights",
        "query": "MATCH (u {hasspn:true})-[:AdminTo*]->(:Computer) RETURN u",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users who are members of high-value groups",
        "query": "MATCH p=shortestPath((:User {hasspn:true})-[:MemberOf*1..]->(:Group {highvalue:true})) RETURN p",
        "description": ""
    },
    {
        "name": "Find Kerberoastable users with a path to Domain Admin",
        "query": "MATCH p=shortestPath((:User {hasspn:true})-[*1..]->(g:Group)) WHERE g.objectid =~ $domainAdminId RETURN p",
        "description": ""
    },
    {
        "name": "List all Kerberoastable users",
        "query": "MATCH (u:User {hasspn: true}) RETURN u",
        "description": ""
    },
    {
        "name": "List all users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
        "query": "MATCH (u:User {hassspn:true}) WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset ",
        "description": ""
    },
    {
        "name": "List all users with an SPN/List all Kerberoastable users with passwords last set more than 5 years ago",
        "query": "MATCH (u:User {hasspn:true}) WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "List users that can be AS-REP roasted",
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
        "description": ""
    },
    {
        "name": "----------------------------- Owned-related Queries -----------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find the shortest path to Domain Admins from an owned node",
        "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(m:Group {name:$result})) WHERE n <> m RETURN p",
        "description": ""
    },
    {
        "name": "Find the shortest path to a computer from an owned user",
        "query": "MATCH p=shortestPath((:User {owned:true})-[*1..]->(:Computer)) RETURN p",
        "description": ""
    },
    {
        "name": "Find the shortest path to a computer with Unconstrained Delegation enabled from an owned node",
        "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(c:Computer {unconstraineddelegation: true})) WHERE n <> c RETURN p",
        "description": ""
    },
    {
        "name": "Find the shortest path to a high-value node from an owned node",
        "query": "MATCH p=shortestPath((n {owned:true})-[*1..]->(m {highvalue:true})) WHERE n <> m RETURN p",
        "description": ""
    },
    {
        "name": "----------------------- Password/Session-related Queries -----------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find all active Domain Admin sessions",
        "query": "MATCH (u:User)-[:MemberOf*]->(g:Group) WHERE g.objectid =~ $domainAdminId MATCH p=(:Computer)-[:HasSession*]->(u) RETURN p",
        "description": ""
    },
    {
        "name": "Find all sessions a user in a specific domain has",
        "query": "MATCH p=(:User {name:$result})-[:HasSession*]->(:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users with their password in the AD",
        "query": "MATCH (u:User) WHERE u.userpassword IS NOT NULL RETURN u",
        "description": ""
    },
    {
        "name": "Find all users with the keyword \"pass\" in their description field",
        "query": "MATCH (u:User) WHERE u.description =~ $regex RETURN u",
        "description": ""
    },
    {
        "name": "Find users that have never logged on and account is still active",
        "query": "MATCH (u:User {enabled:true}) WHERE u.lastlogontimestamp = -1.0 RETURN u",
        "description": ""
    },
    {
        "name": "-------------------------- Recon-related Queries (Basic) --------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
        "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c",
        "description": ""
    },
    {
        "name": "Show the groups of all high-value nodes",
        "query": "MATCH p=(:User)-[:MemberOf*]->(:Group {highvalue:true}) RETURN p",
        "description": ""
    },
    {
        "name": "View all computers (Warning: Heavy)",
        "query": "Match (c:Computer) RETURN c",
        "description": ""
    },
    {
        "name": "View all GPOs (Warning: Heavy)",
        "query": "Match (g:GPO) RETURN g",
        "description": ""
    },
    {
        "name": "View all groups (Warning: Heavy)",
        "query": "Match (g:Group) RETURN g",
        "description": ""
    },
    {
        "name": "View all users (Warning: Heavy)",
        "query": "Match (u:User) RETURN u",
        "description": ""
    },
    {
        "name": "View all groups that contain the word 'admin'",
        "query": "Match (g:Group) WHERE g.name CONTAINS 'ADMIN' RETURN g",
        "description": ""
    },
    {
        "name": "----------------------- Recon-related Queries (Advanced) -----------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "----------------------------- Computer-related Queries -----------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find all computers with unsupported Operating Systems",
        "query": "MATCH (c:Computer) WHERE c.operatingsystem =~ $unsupportedOS RETURN c",
        "description": ""
    },
    {
        "name": "Find computers that allow Domain Users to RDP into",
        "query": "match p=(g:Group)-[:CanRDP*]->(c:Computer) WHERE g.objectid =~ $domainUserId return p",
        "description": ""
    },
    {
        "name": "Find computers that allow Unconstrained Delegation that AREN\u00e2\u20ac\u2122T domain controllers.",
        "query": "MATCH (c1:Computer)-[:MemberOf*]->(g:Group) WHERE g.objectid =~ $domainControllerId WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
        "description": ""
    },
    {
        "name": "Find computers with constrained delegation and the corresponding nodes where they allowed to delegate",
        "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
        "description": ""
    },
    {
        "name": "------------------------- Domain/Forest-related Queries -------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find an node from domain 'A' that can do anything to a foreign node",
        "query": "MATCH p=(n:Domain {domain:$result})-[*]->(m:Domain) WHERE n <> m RETURN p",
        "description": ""
    },
    {
        "name": "Find an node in one domain that can do something to a foreign node",
        "query": "MATCH p=(n:Domain)-[*]->(m:Domain) WHERE n <> m RETURN p",
        "description": ""
    },
    {
        "name": "------------------------------- Group-related Queries -------------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(:Group)-[:ForceChangePassword*]->(:User) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that can RDP",
        "query": "MATCH p=(:Group)-[:CanRDP*]->(:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find groups that contain both users and computers",
        "query": "MATCH (:Computer)-[:MemberOf*]->(groupsWithComps:Group) WITH groupsWithComps MATCH (:User)-[:MemberOf*]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
        "description": ""
    },
    {
        "name": "Find groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(:Group)-[:AdminTo*]->(:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find rights that member of the Domain User group should not have on computers",
        "query": "MATCH p=(g:Group)-[:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword*]->(:Computer) WHERE g.objectid =~ $domainUserId RETURN p",
        "description": ""
    },
    {
        "name": "-------------------------------- User-related Queries --------------------------------",
        "query": "",
        "description": ""
    },
    {
        "name": "Find all users that are part of the VPN group",
        "query": "Match p=(:User)-[:MemberOf*]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
        "description": ""
    },
    {
        "name": "Find all users that have local admin rights",
        "query": "MATCH p=(:User)-[:AdminTo*]->(:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find constrained delegation",
        "query": "MATCH p=(:User)-[:AllowedToDelegate*]->(:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
        "query": "MATCH p=(:User)-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*]->(:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups",
        "query": "MATCH p=shortestPath((:User {admincount:False})-[:AddMember*1..]->(:Group)) RETURN p",
        "description": ""
    },
    {
        "name": "List all users with password not required",
        "query": "MATCH (u:User {passwordnotreqd:true}) RETURN u",
        "description": ""
    },
    {
        "name": "List the groups of all users with password not required",
        "query": "MATCH p=(:User {passwordnotreqd:true})-[:MemberOf*]->(:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Find more privileged groups",
        "query": "MATCH (g:Group) WHERE g.objectid =~ '.*-(512|517|518|519|520|521|522|526|527|(?i)S-1-5-32-(544|547|548|549|550|551|552|556|557|580)|(?i)S-1-5-9)$' OR toUpper(g.samaccountname) = 'DNSADMINS' RETURN g",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark more privileged groups as HVT",
        "query": "MATCH (g:Group) WHERE g.objectid =~ '.*-(512|517|518|519|520|521|522|526|527|(?i)S-1-5-32-(544|547|548|549|550|551|552|556|557|580)|(?i)S-1-5-9)$' OR toUpper(g.samaccountname) = 'DNSADMINS' SET g.highvalue=TRUE RETURN g",
        "description": ""
    },
    {
        "name": "Find low value members of High Value Target Groups (1 hop)",
        "query": "MATCH p=(m {highvalue: FALSE})-[:MemberOf]->(g:Group {highvalue: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark low value members of High Value Target Groups as HVT (1 hop)",
        "query": "MATCH p=(o {highvalue: FALSE})-[:MemberOf]->(g:Group {highvalue: TRUE}) SET o.highvalue=TRUE RETURN p",
        "description": ""
    },
    {
        "name": "Find objects containing names of some tier 0 software (SCCM, Veeam, ...)",
        "query": "MATCH (o) WHERE (o.samaccountname =~ '(?i).*(?:sccm|veeam|boomgar|tivoli|altiris|varonis|vcenter|vsphere|esx).*') RETURN o",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark objects containing names of some tier 0 software (SCCM, Veeam, ...) as HVT",
        "query": "MATCH (o) WHERE (o.samaccountname =~ '(?i).*(?:sccm|veeam|boomgar|tivoli|altiris|varonis|vcenter|vsphere|esx).*') SET o.highvalue=TRUE RETURN o",
        "description": ""
    },
    {
        "name": "Find low value objects with ACLs on high value objects (1 hop, max 200, Heavy)",
        "query": "MATCH p=((a {highvalue: FALSE})-[r]->(b {highvalue: TRUE})) WHERE NOT (type(r) = 'Contains') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark low value objects with ACLs on high value objects as HVT (1 hop, max 200, Heavy)",
        "query": "MATCH p=((a {highvalue: FALSE})-[r]->(b {highvalue: TRUE})) WHERE NOT (type(r) = 'Contains') SET a.highvalue=TRUE RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Owned objects",
        "query": "MATCH (o {owned: TRUE}) RETURN o",
        "description": ""
    },
    {
        "name": "Direct groups of owned users",
        "query": "MATCH p=(u:User {owned: TRUE})-[:MemberOf]->(g:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Unrolled groups of owned users",
        "query": "MATCH p=(u:User {owned: TRUE})-[:MemberOf*1..]->(g:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=shortestPath((n {owned: TRUE})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue: TRUE})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=allShortestPaths((n {owned: TRUE})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
        "description": ""
    },
    {
        "name": "Next steps (5 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: TRUE})-[*1..5]->(s)) WHERE NOT c = s RETURN p",
        "description": ""
    },
    {
        "name": "Next steps (3 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: TRUE})-[*1..3]->(s)) WHERE NOT c = s RETURN p",
        "description": ""
    },
    {
        "name": "Owned users with permissions against GPOs",
        "query": "MATCH p=(u:User {owned: TRUE})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "Connections between different domains/forests",
        "query": "MATCH p = (a)-[r]->(b) WHERE NOT a.domain = b.domain RETURN p",
        "description": ""
    },
    {
        "name": "Connections (ACEs only) between different domains/forests",
        "query": "MATCH p = (a)-[r]->(b) WHERE NOT a.domain = b.domain AND r.isacl = TRUE RETURN p",
        "description": ""
    },
    {
        "name": "Can a user from domain A do anything to any computer in domain B (Warning: VERY Heavy)",
        "query": "WITH split($result, \"=>\") AS selectedDomains WITH selectedDomains[0] AS sourceDomain, selectedDomains[1] AS destDomain MATCH (n:User {domain: sourceDomain}) MATCH (m:Computer {domain: destDomain}) MATCH p=allShortestPaths((n)-[r:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin*1..]->(m)) WHERE NOT n = m RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable enabled users",
        "query": "MATCH (u:User {enabled: TRUE, hasspn: TRUE}) RETURN u",
        "description": ""
    },
    {
        "name": "AS-REProastable enabled users",
        "query": "MATCH (u:User {enabled: TRUE, dontreqpreauth: TRUE}) RETURN u",
        "description": ""
    },
    {
        "name": "Kerberoastable users with a path to DA",
        "query": "MATCH p = shortestPath( (u:User {enabled: TRUE, hasspn: TRUE})-[*1..]->(g:Group) ) WHERE g.objectid ENDS WITH '-512' RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable enabled users with a path to High Value",
        "query": "MATCH p = shortestPath( (u:User {enabled: TRUE, hasspn: TRUE})-[*1..]->(n {highvalue: TRUE}) ) RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable enabled users and where they are AdminTo",
        "query": "MATCH p = shortestPath((u:User {enabled: TRUE, hasspn:TRUE})-[:AdminTo]->(c:Computer {enabled: TRUE})) RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable enabled users who are members of high value groups",
        "query": "MATCH p = shortestPath((u:User {enabled: TRUE, hasspn: TRUE})-[:MemberOf*1..]->(g:Group {highvalue: TRUE})) RETURN p",
        "description": ""
    },
    {
        "name": "Kerberoastable enabled users with passwords last set > 5 years ago",
        "query": "MATCH (u:User {enabled: TRUE, hasspn: TRUE}) WHERE u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Unconstrained Delegations for enabled computers",
        "query": "MATCH (c {enabled: TRUE, unconstraineddelegation: TRUE}) RETURN c",
        "description": ""
    },
    {
        "name": "Constrained Delegations (with Protocol Transition)",
        "query": "MATCH (c) WHERE NOT c.allowedtodelegate IS NULL AND c.trustedtoauth=TRUE RETURN c",
        "description": ""
    },
    {
        "name": "Constrained Delegations (without Protocol Transition)",
        "query": "MATCH (c) WHERE NOT c.allowedtodelegate IS NULL AND c.trustedtoauth=FALSE RETURN c",
        "description": ""
    },
    {
        "name": "Resource-Based Constrained Delegations",
        "query": "MATCH p=(u:User {enabled: TRUE})-[:AllowedToAct]->(c:Computer {enabled: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Unconstrained Delegation systems (without domain controllers)",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2",
        "description": ""
    },
    {
        "name": "Shortest paths from owned principals to unconstrained delegation systems",
        "query": "MATCH p=shortestPath((o {owned: TRUE})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: TRUE})) WHERE NOT o=m RETURN p",
        "description": ""
    },
    {
        "name": "Between users (1 hop, max 200)",
        "query": "MATCH p=(u1:User { enabled: TRUE } )-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink]->(u2:User) WHERE NOT(u1.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between users (3 hops, max 200)",
        "query": "MATCH p=(u1:User { enabled: TRUE } )-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink*1..3]->(u2:User) WHERE NOT(u1.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between computers (1 hop, max 200)",
        "query": "MATCH p=(c1:Computer {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink]->(c2:Computer) WHERE NOT(c1.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between computers (3 hops, max 200)",
        "query": "MATCH p=(c1:Computer {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink*1..3]->(c2:Computer) WHERE NOT(c1.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Find computers admin to other computers",
        "query": "MATCH p = (c1:Computer)-[r1:AdminTo]->(c2:Computer) RETURN p UNION ALL MATCH p = (c3:Computer)-[r2:MemberOf*1..]->(g:Group)-[r3:AdminTo]->(c4:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Between enabled users and computers (1 hop, max 200)",
        "query": "MATCH p=(u:User {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink]->(c:Computer) WHERE NOT(u.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between enabled users and computers (3 hops, max 200)",
        "query": "MATCH p=(u:User {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink*1..3]->(c:Computer) WHERE NOT(u.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between enabled computers and users (1 hop, max 200)",
        "query": "MATCH p=(c:Computer {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink]->(u:User) WHERE NOT(u.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Between enabled computers and users (3 hops, max 200)",
        "query": "MATCH p=(c:Computer {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink*1..3]->(u:User) WHERE NOT(u.name STARTS WITH 'MSOL_') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Objects with the AddAllowedToAct or WriteAccountRestrictions right on an enabled computer",
        "query": "MATCH p=(g {enabled: TRUE})-[:AddAllowedToAct|WriteAccountRestrictions]->(c:Computer {enabled: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Miscellaneous direct ACLs from enabled objects (1 hop, max 200)",
        "query": "MATCH p=(u1 {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink|Enroll|ManageCa|ManageCertificates]->(u2) WHERE NOT(u1.name STARTS WITH 'MSOL_') AND NOT(u2.name STARTS WITH 'MSOL_') AND NOT(u1.name CONTAINS 'ADMIN') AND NOT(u2.name CONTAINS 'ADMIN') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Miscellaneous direct ACLs from enabled objects (3 hops, max 200)",
        "query": "MATCH p=(u1 {enabled: TRUE})-[:AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|AddSelf|WriteSPN|AddKeyCredentialLink|Enroll|ManageCa|ManageCertificates*1..3]->(u2) WHERE NOT(u1.name STARTS WITH 'MSOL_') AND NOT(u2.name STARTS WITH 'MSOL_') AND NOT(u1.name CONTAINS 'ADMIN') AND NOT(u2.name CONTAINS 'ADMIN') RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Logged in Admins",
        "query": "MATCH p=(c:Computer {enabled: TRUE})-[:HasSession]->(u:User {enabled: TRUE}) WITH c,u MATCH p=shortestPath((u)-[:AdminTo|MemberOf*1..]->(c)) RETURN p",
        "description": ""
    },
    {
        "name": "Users with local admin rights",
        "query": "MATCH p=(m:User {enabled: TRUE})-[:AdminTo]->(n:Computer {enabled: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Administrators and Domain/Entreprise Admins with sessions",
        "query": "MATCH (u:User {enabled: TRUE})-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '.*-(512|519|(?i)S-1-5-32-544)$' WITH COLLECT(u.objectid) AS domainAdmins MATCH p = (c2:Computer {enabled: TRUE})-[:HasSession]->(u2:User {enabled: TRUE}) WHERE u2.objectid IN domainAdmins RETURN p",
        "description": ""
    },
    {
        "name": "Administrators and Domain/Entreprise Admins with sessions not on domain controllers",
        "query": "MATCH (u:User {enabled: TRUE})-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '.*-(512|519|(?i)S-1-5-32-544)$' WITH COLLECT(u.objectid) AS domainAdmins MATCH (c:Computer {enabled: TRUE})-[:MemberOf*1..]->(g2:Group) WHERE g2.objectid =~ '.*-(516|(?i)S-1-5-9)$' WITH COLLECT(c.objectid) AS domainControllers, domainAdmins MATCH p = (c2:Computer {enabled: TRUE})-[:HasSession]->(u2:User {enabled: TRUE}) WHERE u2.objectid IN domainAdmins AND NOT c2.objectid IN domainControllers RETURN p",
        "description": ""
    },
    {
        "name": "High Value users sessions",
        "query": "MATCH (n:User {enabled: TRUE})-[:MemberOf*1..]->(g:Group {highvalue: TRUE}) MATCH p = (c:Computer {enabled: TRUE})-[:HasSession]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
        "query": "MATCH (u:User {enabled:TRUE})-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '(?i)S-1-5-.*-525$' WITH COLLECT (u.objectid) AS protectedUsers MATCH p=(u2:User {enabled:TRUE, admincount:TRUE, sensitive:FALSE})-[:MemberOf*1..3]->(g2:Group) WHERE NOT u2.objectid IN protectedUsers RETURN p",
        "description": ""
    },
    {
        "name": "Enabled Domain/Enterprise Administrators, not sensitive for delegation and not members of Protected Users",
        "query": "MATCH (u:User {enabled: TRUE, admincount: TRUE})-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '.*-525$' WITH COLLECT(u.objectid) AS protectedUsers MATCH p=(u2:User {enabled: TRUE, admincount: TRUE, sensitive: FALSE})-[:MemberOf*1..]->(g2:Group) WHERE NOT u2.objectid IN protectedUsers AND g2.objectid =~ '.*-(512|519|(?i)S-1-5-32-544)$' RETURN p",
        "description": ""
    },
    {
        "name": "Enabled users, members of high value groups, not sensitive for delegation and not members of Protected Users (Heavy)",
        "query": "MATCH (u:User {enabled: TRUE, admincount: TRUE})-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ '.*-525$' WITH COLLECT (u.objectid) AS protectedUsers MATCH p=(u2:User {enabled: TRUE, sensitive: FALSE})-[:MemberOf*1..]->(g2:Group {highvalue: TRUE}) WHERE NOT u2.objectid IN protectedUsers RETURN p",
        "description": ""
    },
    {
        "name": "Groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
        "description": ""
    },
    {
        "name": "Groups that can change user passwords",
        "query": "MATCH p=(m:Group)-[:ForceChangePassword]->(n:User) RETURN DISTINCT m[.]name,  COUNT(m[.]name) ORDER BY COUNT(m[.]name) DESC",
        "description": ""
    },
    {
        "name": "Groups of High Value Targets",
        "query": "MATCH p=(n:User)-[:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
        "description": ""
    },
    {
        "name": "Non Admin Groups with High Value Privileges",
        "query": "MATCH p=(g:Group)-[:Owns|:WriteDacl|:GenericAll|:WriteOwner|:ExecuteDCOM|:GenericWrite|:AllowedToDelegate|:ForceChangePassword]->(n:Computer) WHERE NOT g.name CONTAINS 'ADMIN' RETURN p",
        "description": ""
    },
    {
        "name": "Groups with Computer and User Objects",
        "query": "MATCH (c:Computer)-[:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) AS groupsWithCompsAndUsers",
        "description": ""
    },
    {
        "name": "Groups that can reset passwords of enabled users (Warning: Heavy)",
        "query": "MATCH p=(g:Group)-[:ForceChangePassword]->(u:User {enabled: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Groups that have local admin rights on enabled computers (Warning: Heavy)",
        "query": "MATCH p=(g:Group)-[:AdminTo]->(c:Computer {enabled: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Users never logged on and account still active",
        "query": "MATCH (u:User {enabled: TRUE, lastlogontimestamp:-1.0}) RETURN u",
        "description": ""
    },
    {
        "name": "Users logged in the last 90 days and account still active",
        "query": "MATCH (u:User {enabled: TRUE}) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Users with passwords last set in the last 90 days and account still active",
        "query": "MATCH (u:User {enabled: TRUE}) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
        "description": ""
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups (3 hops)",
        "query": "MATCH p=(u:User {enabled: TRUE, admincount: FALSE})-[:AddMember*1..3]->(m:Group) RETURN p",
        "description": ""
    },
    {
        "name": "Find all users a part of the VPN group",
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' RETURN p",
        "description": ""
    },
    {
        "name": "View all GPOs",
        "query": "MATCH (g:GPO) RETURN g",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark all GPOs as High Value Target",
        "query": "MATCH (g:GPO) SET g.highvalue=TRUE RETURN g",
        "description": ""
    },
    {
        "name": "Find if any low value object has interesting permissions against a GPO (1 hop)",
        "query": "MATCH p=(o {highvalue: FALSE})-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink]->(g:GPO) RETURN p",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark any low value object with interesting permissions against a GPO as HVT (1 hop)",
        "query": "MATCH p=(o {highvalue: FALSE})-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink]->(g:GPO) SET o.highvalue=TRUE RETURN p",
        "description": ""
    },
    {
        "name": "Find if any enabled unprivileged domain user has interesting permissions against a GPO (3 hops, limit 200)",
        "query": "MATCH p=(u:User {enabled: TRUE, admincount: FALSE})-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..3]->(g:GPO) RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Find if any enabled unprivileged domain user has interesting permissions against a GPO (5 hops, limit 200, Warning: Heavy)",
        "query": "MATCH p=(u:User {enabled: TRUE, admincount: FALSE})-[:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..5]->(g:GPO) RETURN p LIMIT 200",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows XP",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS 'XP' RETURN c",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows 2000",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS '2000' RETURN c",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows 2003",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS '2003' RETURN c",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows 2008",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS '2008' RETURN c",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows Vista",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS 'VISTA' RETURN c",
        "description": ""
    },
    {
        "name": "Find all computers running with Windows 7",
        "query": "MATCH (c:Computer) WHERE toUpper(c.operatingsystem) CONTAINS '7' RETURN c",
        "description": ""
    },
    {
        "name": "Top Ten Users with Most Sessions",
        "query": "MATCH (n:User),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Sessions",
        "query": "MATCH (n:User),(m:Computer), (n)<-[r:HasSession]-(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)-[r:HasSession]->(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Users with Most Local Admin Rights",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH n, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Admins and their admins",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN p",
        "description": ""
    },
    {
        "name": "Top Ten Computers with Most Admins",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) RETURN m",
        "description": ""
    },
    {
        "name": "(Warning: edits the DB) Mark Top Ten Computers with Most Admins as HVT",
        "query": "MATCH (n:User),(m:Computer), (n)-[r:AdminTo]->(m) WHERE NOT n.name STARTS WITH 'ANONYMOUS LOGON' AND NOT n.name='' WITH m, count(r) AS rel_count order by rel_count desc LIMIT 10 MATCH p=(m)<-[r:AdminTo]-(n) SET m.highvalue = true RETURN m",
        "description": ""
    },
    {
        "name": "Top 20 nodes, 5 nested max, not DA, not HVT, most group deleg rights",
        "query": "MATCH (daGroup:Group)<-[:MemberOf*1..]-(domainAdmin) WHERE daGroup.objectid ENDS WITH '-512' WITH COLLECT(domainAdmin) AS domainAdmins MATCH (admGroup:Group)<-[:MemberOf*1..]-(domainAdm) WHERE admGroup.objectid ENDS WITH '-544' WITH domainAdmins, COLLECT(domainAdm) AS domainAdms MATCH p=(u)-[r1:MemberOf*1..5]->(g:Group)-[r2]->(n) WHERE r2.isacl=true AND NOT u IN domainAdmins AND NOT u IN domainAdms AND NOT u.highvalue=true WITH u, COUNT(r2) AS count_ctrl ORDER BY count_ctrl DESC LIMIT 20 RETURN u",
        "description": ""
    },
    {
        "name": "Top 10 computers, 5 nested max, not DC, most group deleg rights",
        "query": "MATCH (dcGroup:Group)<-[:MemberOf*1..]-(domainControllers) WHERE dcGroup.objectid ENDS WITH '-516' WITH COLLECT(domainControllers) AS domainControllers MATCH p=(u:Computer)-[r1:MemberOf*1..5]->(g:Group)-[r2]->(n) WHERE r2.isacl=true AND NOT u IN domainControllers WITH u, count(r2) AS count_ctrl ORDER BY count_ctrl DESC LIMIT 10 RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled machines Domain Users can RDP to",
        "query": "MATCH p=((g:Group)-[:CanRDP]->(c:Computer {enabled: TRUE})) WHERE g.objectid ENDS WITH '-513' RETURN p AS path UNION MATCH p2=((g2:Group)-[:MemberOf*1..]->(g3:Group)-[:CanRDP]->(c2:Computer {enabled: TRUE})) WHERE g2.objectid ENDS WITH '-513' RETURN p2 AS path",
        "description": ""
    },
    {
        "name": "Find enabled servers Domain Users can RDP to",
        "query": "MATCH p=((g:Group)-[:CanRDP]->(c:Computer {enabled: TRUE})) WHERE g.objectid ENDS WITH '-513' AND c.operatingsystem =~ '(?i).*Server.*' RETURN p AS path UNION MATCH p2=((g2:Group)-[:MemberOf*1..]->(g3:Group)-[:CanRDP]->(c2:Computer {enabled: TRUE})) WHERE g2.objectid ENDS WITH '-513' AND c2.operatingsystem =~ '(?i).*Server.*' RETURN p2 AS path",
        "description": ""
    },
    {
        "name": "Find enabled machines Authenticated Users can RDP to",
        "query": "MATCH p=((g:Group)-[:CanRDP]->(c:Computer {enabled: TRUE})) WHERE g.objectid =~ '(?i).*S-1-5-11$' RETURN p AS path UNION MATCH p2=((g2:Group)-[:MemberOf*1..]->(g3:Group)-[:CanRDP]->(c2:Computer {enabled: TRUE})) WHERE g2.objectid =~ '(?i).*S-1-5-11$' RETURN p2 AS path",
        "description": ""
    },
    {
        "name": "Find enabled servers Authenticated Users can RDP to",
        "query": "MATCH p=((g:Group)-[:CanRDP]->(c:Computer {enabled: TRUE})) WHERE g.objectid =~ '(?i).*S-1-5-11$' AND c.operatingsystem =~ '(?i).*Server.*' RETURN p AS path UNION MATCH p2=((g2:Group)-[:MemberOf*1..]->(g3:Group)-[:CanRDP]->(c2:Computer {enabled: TRUE})) WHERE g2.objectid =~ '(?i).*S-1-5-11$' AND c2.operatingsystem =~ '(?i).*Server.*' RETURN p2 AS path",
        "description": ""
    },
    {
        "name": "Find what groups can RDP",
        "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users that are part of the \u00e2\u20ac\u02dcGlobal Administrator\u00e2\u20ac\u2122 Role",
        "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p",
        "description": ""
    },
    {
        "name": "Return All Azure Users and their Groups",
        "query": "MATCH p=(m:AZUser)-[r:MemberOf]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p",
        "description": ""
    },
    {
        "name": "Find all Certificate Templates",
        "query": "MATCH (n:GPO {type: 'Certificate Template'}) RETURN n",
        "description": ""
    },
    {
        "name": "Find enabled Certificate Templates",
        "query": "MATCH (n:GPO {Enabled: TRUE, type: 'Certificate Template'}) RETURN n",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities",
        "query": "MATCH (n:GPO {type: 'Enrollment Service'}) RETURN n",
        "description": ""
    },
    {
        "name": "Find objects with the ManageCa or ManageCertificates right on Certificate Authorities",
        "query": "MATCH p=(o)-[:ManageCa|ManageCertificates]->(c:GPO {type: 'Enrollment Service'}) RETURN p",
        "description": ""
    },
    {
        "name": "Show Enrollment Rights for Certificate Template",
        "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {type: 'Certificate Template', name:$result}) RETURN p",
        "description": ""
    },
    {
        "name": "Show Rights for Certificate Authority",
        "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) RETURN p",
        "description": ""
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC1)",
        "query": "MATCH (n:GPO {type: 'Certificate Template', `Enrollee Supplies Subject`: TRUE, `Client Authentication`: TRUE, `Enabled`: TRUE}) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[*1..]->(n:GPO {type: 'Certificate Template', `Enrollee Supplies Subject`: TRUE, `Client Authentication`: TRUE, `Enabled`: TRUE})) WHERE g<>n RETURN p",
        "description": ""
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC2)",
        "query": "MATCH (n:GPO {type: 'Certificate Template', `Enabled`: TRUE}) WHERE (n.`Extended Key Usage` = [] OR 'Any Purpose' IN n.`Extended Key Usage`) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[*1..]->(n:GPO {type: 'Certificate Template', `Enabled`: TRUE})) WHERE g<>n AND (n.`Extended Key Usage` = [] OR 'Any Purpose' IN n.`Extended Key Usage`) RETURN p",
        "description": ""
    },
    {
        "name": "Find Enrollment Agent Templates (ESC3)",
        "query": "MATCH (n:GPO {type: 'Certificate Template', `Enabled`: TRUE}) WHERE (n.`Extended Key Usage` = [] OR 'Any Purpose' IN n.`Extended Key Usage` OR 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[*1..]->(n:GPO {type: 'Certificate Template', `Enabled`: TRUE})) WHERE g<>n AND (n.`Extended Key Usage` = [] OR 'Any Purpose' IN n.`Extended Key Usage` OR 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO {type: 'Certificate Template', `Enabled`: TRUE})) WHERE g<>n RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[*1..]->(n:GPO {type: 'Certificate Template', `Enabled`: TRUE})) WHERE g<>n AND NONE(x IN relationships(p) WHERE type(x) = 'Enroll' OR type(x) = 'AutoEnroll') RETURN p",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
        "query": "MATCH (n:GPO {type: 'Enrollment Service', `User Specified SAN`:'Enabled'}) RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO {type: 'Enrollment Service'})) WHERE g<>n RETURN p",
        "description": ""
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[*1..]->(n:GPO {type:'Enrollment Service'})) WHERE g<>n AND NONE(x IN relationships(p) WHERE type(x) = 'Enroll' OR type(x) = 'AutoEnroll') RETURN p",
        "description": ""
    },
    {
        "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
        "query": "MATCH (n:GPO {type: 'Enrollment Service', `Web Enrollment`:'Enabled'}) RETURN n",
        "description": ""
    },
    {
        "name": "Find Unsecured Certificate Templates - Domain Escalation (ESC9)",
        "query": "MATCH (n:GPO {type: 'Certificate Template', `Enrollee Supplies Subject`: TRUE, `Client Authentication`: TRUE, `Enabled`: TRUE}) RETURN n",
        "description": ""
    },
    {
        "name": "Find Unsecured Certificate Templates - PKI (ESC9)",
        "query": "MATCH (n:GPO {type: 'Certificate Template', `Enabled`: TRUE}) WHERE 'NoSecurityExtension' IN n.`Enrollment Flag` RETURN n",
        "description": ""
    },
    {
        "name": "Shortest Paths to Unsecured Certificate Templates from Owned Principals (ESC9)",
        "query": "MATCH p=allShortestPaths((g {owned: TRUE})-[r*1..]->(n:GPO {type: 'Certificate Template', `Enabled`: TRUE})) WHERE g<>n AND 'NoSecurityExtension' IN n.`Enrollment Flag` AND NONE(rel IN r WHERE type(rel) IN ['EnabledBy','Read','ManageCa','ManageCertificates']) RETURN p",
        "description": ""
    },
    {
        "name": "Find enabled users with a plaintext attribute that can RDP into something",
        "query": "MATCH p=(u:User {enabled: TRUE, plaintext: TRUE})-[:CanRDP*1..]->(c:Computer) RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled users with a plaintext attribute that belong to high value groups",
        "query": "MATCH p=(u:User {enabled, TRUE, plaintext: TRUE})-[:MemberOf*1..]->(g:Group {highvalue: TRUE}) RETURN p",
        "description": ""
    },
    {
        "name": "Find enabled users with a plaintext attribute that are kerberoastable",
        "query": "MATCH (u:User {enabled: TRUE, plaintext: TRUE, hasspn: TRUE}) RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled users with seasons in their password and are high value targets",
        "query": "MATCH p=(u:User {enabled: TRUE, plaintext: TRUE})-[:MemberOf*1..]->(g:Group {highvalue: TRUE}) WHERE u.plaintextpassword =~ '(?i).*(?:winter|spring|summer|fall).*' RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled users with seasons in their password and have local admin on at least one computer",
        "query": "MATCH p=(u:User {enabled: TRUE, plaintext: TRUE})-[:AdminTo]->(n:Computer) WHERE u.plaintextpassword =~ '(?i).*(?:winter|spring|summer|fall).*' RETURN p",
        "description": ""
    },
    {
        "name": "Find enabled users with seasons in their password and a path to high value targets (limit to 25 results)",
        "query": "MATCH p=shortestPath((u:User {enabled: TRUE, plaintext: TRUE})-[*1..]->(n {highvalue: TRUE})) WHERE u.plaintextpassword =~ '(?i).*(?:winter|spring|summer|fall).*' AND u<>n RETURN u LIMIT 25",
        "description": ""
    },
    {
        "name": "Find enabled users with a variant of \"password\" in their password and are members of high value groups",
        "query": "MATCH p=(u:User {enabled: TRUE, plaintext: TRUE})-[:MemberOf*1..]->(m:Group {highvalue: TRUE}) WHERE u.plaintextpassword =~ '(?i).*(?:password).*' RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled users with a variant of \"password\" in their password and have local admin on at least one computer",
        "query": "MATCH p=(u:User {enabled: TRUE, plaintext: TRUE})-[:AdminTo]->(c:Computer {enabled: TRUE}) WHERE u.plaintextpassword =~ '(?i).*(?:password).*' RETURN u",
        "description": ""
    },
    {
        "name": "Find enabled users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
        "query": "MATCH p=shortestPath((u:User {enabled: TRUE, plaintext: TRUE})-[*1..]->(o {highvalue: TRUE})) WHERE u.plaintextpassword =~ '(?i).*(?:password).*' RETURN p LIMIT 25",
        "description": ""
    }
]